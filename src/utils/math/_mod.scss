@import 'trigonomic';
@import 'hyperbolic';
@import 'logarithmic';

/// The value of PI
/// @type number
/// @group math
/// @link https://en.wikipedia.org/wiki/Mathematical_constant#Archimedes'_constant_%CF%80
///
$PI: 3.1415926535897932384626433832795028841971693993751;

/// Eulers number
/// @type number
/// @group math
/// @link https://en.wikipedia.org/wiki/Mathematical_constant#Euler's_number_e
///
$E: 2.71828182845904523536028747135266249775724709369995;

/// Pythagoras' constant
/// @type number
/// @group math
/// @link https://en.wikipedia.org/wiki/Mathematical_constant#Pythagoras'_constant_%E2%88%9A2
///
$PC: 1.4142135624;

/// Theodorus' constant
/// @type number
/// @group math
/// @link https://en.wikipedia.org/wiki/Square_root_of_3
///
$TC: 1.7320508076;

/// The natural log of the number 2
/// @type number
/// @group math
/// @link https://en.wikipedia.org/wiki/Natural_logarithm_of_2
///
$LN2: 0.6931471806;

/// Rounds a number to a specific number of decimals
///
/// @author ImBrett
/// @group math
/// @arg {number} $number [null]
/// The number to round
/// @arg {number} $power [null]
/// The number of decimal points to round to
/// @return {number} The rounded number
///
/// @example scss Rounding a number to the second decimal place
///   $value: toFixed(3.14159, 100) => 3.14
///
@function toFixed($number, $power){
  @return round($number * $power) / $power;
}

/// Multiplies a number by the golden ratio
///
/// @author ImBrett
/// @group math
/// @arg {number} $number [1]
/// The base number to multiply the golden ratio by
/// @return {number} The value of the golden ratio times the base number
///
/// @example scss Returning the original golden ratio value
/// $value: goldenRatio(); => 1.6180339887
///
/// @example scss Multiplying the value of the golden ratio by 5
/// $value: goldenRatio(5); => 8.0901699437
///
@function goldenRatio($number: 1){
  @return (1/2 + sqrt(5) / 2) * $number;
}

/// Calculates the exponent `$exp` of a number `$number`
///
/// @author ImBrett
/// @group math
/// @arg {number} $number [null]
/// The base number
/// @arg {number} $exp [null]
/// The exponent to calculate
/// @return {number} The calculated exponent
///
/// @example scss Calculating the second exponent of the number 2
///   $value: pow(2, 2); => 4
///
@function pow($number, $exp){
  $value: 1;
  @if ($exp > 0){
      @for $i from 1 through $exp{
        $value: $value * $number;
      }
  } @else {
    @for $i from 1 through -$exp{
      $value: $value / $number;
    }
  }
  @return $value;
}

/// Calculates the factorial of a given number
///
/// @author ImBrett
/// @group math
/// @arg {number} $number [null]
/// The number to calculate a factorial for
/// @return {number} The calculated factorial
///
/// @example scss Determining the factorial of 5
/// $value: factorial(5); => 120
///
@function factorial($number){
  $value: 1;
  @if $number > 0{
    @for $i from 1 through $number{
      $value: $value * $i;
    }
  }
  @return $value;
}

/// Derermines the radian for a given angle `$angle`
///
/// @author ImBrett
/// @group math
/// @arg {number} $angle [null]
/// The angle to determine the radian for
/// @return {number} The angles radian
/// @throws error
///
/// @example scss Determining the radian for a 45 degree angle
/// $value: radian(45deg); => 0.7853981634
///
@function radian($angle) {
  $unit: unit($angle);
  $unitless: $angle / ($angle * 0 + 1);
  @if $unit == deg {
    $unitless: $unitless / 180 * $PI;
    @return $unitless;
  }
  @error '#{$angle} must have a degree unit, consider adding `deg` to the end of the number.';
}

/// Calculates the square root of a number
///
/// @author ImBrett
/// @group math
/// @arg {number} $number [null]
/// The number to find the square root of
/// @arg {number} $precision [12]
/// The number of decimal points to calculate to
/// @return {number} The square root of `$number`
///
/// @example scss Calculating the square root of 144
/// $value: sqrt(144); => 12
///
@function sqrt($number, $precision: 12){
  $guess: random(20);
  $value: $guess;
  @for $i from 1 through $precision {
    $value: ($value - (pow($value, 2) - $number) / (2 * $value));
  }
  @return $value;
}
