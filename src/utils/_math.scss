/// The value of PI
/// @type number
/// @link https://en.wikipedia.org/wiki/Mathematical_constant#Archimedes'_constant_%CF%80
///
$PI: 3.1415926535897932384626433832795028841971693993751;

/// Eulers number
/// @type number
/// @link https://en.wikipedia.org/wiki/Mathematical_constant#Euler's_number_e
///
$E: 2.71828182845904523536028747135266249775724709369995;

/// Pythagoras' constant
/// @type number
/// @link https://en.wikipedia.org/wiki/Mathematical_constant#Pythagoras'_constant_%E2%88%9A2
///
$PC: sqrt(2);

/// Theodorus' constant
/// @type number
/// @link https://en.wikipedia.org/wiki/Square_root_of_3
///
$TC: sqrt(3);

/// Calculates the exponent `$exp` of a number `$number`
///
/// @author ImBrett
/// @link https://unindented.org/articles/trigonometry-in-sass/
/// @group utilitiy
/// @arg {number} $number [null]
/// The base number
/// @arg {number} $exp [null]
/// The exponent to calculate
/// @return {number} The calculated exponent
///
/// @example scss Calculating the second exponent of the number 2
///   $four: pow(2, 2);
///
@function pow($number, $exp){
  $value: 1;
  @if ($exp > 0){
      @for $i from 1 through $exp{
        $value: $value * $number;
      }
  } @else {
    @for $i from 1 through -$exp{
      $value: $value / $number;
    }
  }
  @return $value;
}

/// Calculates the factorial of a given number
///
/// @author ImBrett
/// @group utility
/// @link https://unindented.org/articles/trigonometry-in-sass/
/// @arg {number} $number [null]
/// The number to calculate a factorial for
/// @return {number} The calculated factorial
///
@function factorial($number){
  $value: 1;
  @if $number > 0{
    @for $i from 1 through $number{
      $value: $value * $i;
    }
  }
  @return $value;
}

/// Rounds a number to a specific number of decimals
///
/// @author ImBrett
/// @arg {number} $number [null]
/// The number to round
/// @arg {number} $power [null]
/// The number of decimal points to round to
/// @return {number} The rounded number
///
/// @example scss Rounding a number to the second decimal place
///   $rounded-number: toFixed(3.14159, 100) => 3.14
///
@function toFixed($number, $power){
  @return round($number * $power) / $power;
}

/// Derermines the radian for a given angle `$angle`
///
/// @author ImBrett
/// @group utility
/// @link https://unindented.org/articles/trigonometry-in-sass/
/// @arg {number} $angle [null]
/// The angle to determine the radian for
/// @return {number} The angles radian
/// @throws error
///
/// @example scss Determining the radian for a 45 degree angle
///   $radian: radian(45deg); => 0.7853981634
///
@function radian($angle) {
  $unit: unit($angle);
  $unitless: $angle / ($angle * 0 + 1);
  @if $unit == deg {
    $unitless: $unitless / 180 * $PI;
    @return $unitless;
  }
  @error '#{$angle} must have a degree unit, consider adding `deg` to the end of the number.';
}

/// Calculates the square root of a number
///
/// @author ImBrett
/// @group utility
/// @arg {number} $number [null]
/// The number to find the square root of
/// @arg {number} $precision [12]
/// The number of decimal points to calculate to
/// @return {number} The square root of `$number`
///
/// @example scss Calculating the square root of 144
///   $value: sqrt(144); => 12
///
@function sqrt($number, $precision: 12){
  $guess: random(20);
  $value: $guess;
  @for $i from 1 through $precision {
    $value: ($value - (pow($value, 2) - $number) / (2 * $value));
  }
  @return $value;
}

/// A polynomial approximation to approximate a function, find the antiderivative
/// of a complicated function, or compute an otherwise uncomputable sum. Useful
/// to approximate sin and cos functions iteratively.
///
/// @author ImBrett
/// @group utility
/// @link https://mathworld.wolfram.com/MaclaurinSeries.html
/// @arg {number} $start [null]
/// The angle to determine the sin of
/// @arg {number} $key [null]
/// The angle to determine the sin of
/// @arg {number} $number [null]
/// The angle to determine the sin of
/// @return {number} The sin of `$angle`
///
/// @example scss Determining the sin of 45 degrees with a maclauren series
/// $value: maclauren(45, 3, 45); => 0.7071067812
///
/// @example scss Determining the cos of 45 degrees with a maclauren series
/// $value: maclauren(1, 2, 45); => 0.7071067812
///
@function maclaurin($start, $key, $number) {
  $value: $start;
  $add: 0;
  $iter: 50;
  @for $i from 1 through $iter {
    @if $add == 0 {
      $value: $value - (pow($number, $key)/factorial($key));
      $add: 1;
    }
    @else {
      $value: $value + (pow($number, $key)/factorial($key));
      $add: 0;
    }
    $key: $key+2;
  }
  @return $value;
}

/// Determines the arc sine in radians of a given angle `$angle`
///
/// @author ImBrett
/// @group utility
/// @arg {number} $angle [null]
/// The angle to determine the arc sine of
/// @return {number} The arc sine of `$angle`
///
/// @example scss Determining the arc sine of 45 degrees
/// $value: sin(45deg); => 0.7071067812
///
@function sin($angle) {
    $angle: radian($angle);
    @return maclaurin($angle, 3, $angle);
}

/// Determines the arc cosine in radians of a given angle `$angle`
///
/// @author ImBrett
/// @group utility
/// @arg {number} $angle [null]
/// The angle to determine the arc cosine of
/// @return {number} The arc cosine of `$angle`
///
/// @example scss Determining the arc cosine of 45 degress
/// $value: cos(45deg); => 0.7071067812
///
@function cos($angle) {
  $angle: radian($angle);
  @return maclaurin(1, 2, $angle);
}


/// Determines the arc tangent in radians of a given angle `$angle`
///
/// @author ImBrett
/// @group utility
/// @arg {number} $angle [null]
/// The angle to determine the arc tangent of
/// @return {number} The arc tangent of `$angle`
///
/// @example scss Determining the arc tangent of 45 degrees
/// $value: tan(45deg); => 1
///
@function tan($angle) {
  @return sin($angle) / cos($angle);
}

/// Determines the cosecant (reciprocal arc sine) of a given angle `$angle`
///
/// @author ImBrett
/// @group utility
/// @arg {number} $angle [null]
/// The angle to determine the cosecant of
/// @return {number} The cosecant of `$angle`
///
/// @example scss Determining the cosecant of 45 degrees
/// $value: csc(45deg); => 1.4142135623
///
@function csc($angle) {
  @return 1 / sin($angle);
}

/// Determines the secant (reciprocal arc cosine) of a given angle `$angle`
///
/// @author ImBrett
/// @group utility
/// @arg {number} $angle [null]
/// The angle to determine the secant of
/// @return {number} The secant of `$angle`
///
/// @example scss Determining the secant of 45 degrees
/// $value: sec(45deg); => 1.4142135623
///
@function sec($angle) {
  @return 1 / cos($angle);
}


/// Determines the cotangent (reciprocal arc tangent) of a given angle `$angle`
///
/// @author ImBrett
/// @group utility
/// @arg {number} $angle [null]
/// The angle to determine the cotangent of
/// @return {number} The contangent of `$angle`
///
/// @example scss Determining the cotangent of 45 degrees
/// $value: cot(45deg); => 1
///
@function cot($angle) {
  @return 1 / tan($angle);
}

/// Determines the hyperbolic sine of a given number `$number`
///
/// @author ImBrett
/// @group utility
/// @arg {number} $number [null]
/// The number to determine the hyperbolic sine of
/// @return {number} The hyperbolic sine of `$number`
///
/// @example scss Determining the hyperbolic sine of 1
/// $value: sinh(1); => 1.1752011936
///
@function sinh($number) {
  $top: pow($E, (2 * $number)) - 1;
  $bottom: 2 * pow($E, $number);
  @return  $top / $bottom;
}

/// Determines the hyperbolic cosine of a given number `$number`
///
/// @author ImBrett
/// @group utility
/// @arg {number} $number [null]
/// The number to determine the hyperbolic cosine of
/// @return {number} The hyperbolic cosine of `$number`
///
/// @example scss Determining the hyperbolic cosine of 1
/// $value: cosh(1); => 1.54308063482
///
@function cosh($number) {
  $top: pow($E, (2 * $number)) + 1;
  $bottom: 2 * pow($E, $number);
  @return  $top / $bottom;
}

/// Determines the hyperbolic tangent of a given number `$number`
///
/// @author ImBrett
/// @group utility
/// @arg {number} $number [null]
/// The number to determine the hyperbolic tangent of
/// @return {number} The hyperbolic tangent of `$number`
///
/// @example scss Determining the hyperbolic tangent of 1
/// $value: tanh(1); => 0.76159415595
///
@function tanh($number) {
  $top: pow($E, (2 * $number)) - 1;
  $bottom: pow($E, (2 * $number)) + 1;
  @return  $top / $bottom;
}

/// Determines the hyperbolic cosecant of a given number `$number`
///
/// @author ImBrett
/// @group utility
/// @arg {number} $number [null]
/// The number to determine the hyperbolic cosecant of
/// @return {number} The hyperbolic cosecant of `$number`
///
/// @example scss Determining the hyperbolic cosecant of 1
/// $value: csch(1); => 0.8509181283
///
@function csch($number) {
  @return 1 / sinh($number);
}

/// Determines the hyperbolic secant of a given number `$number`
///
/// @author ImBrett
/// @group utility
/// @arg {number} $number [null]
/// The number to determine the hyperbolic secant of
/// @return {number} The hyperbolic secant of `$number`
///
/// @example scss Determining the hyperbolic secant of 1
/// $value: sech(1); => 0.6480542737
///
@function sech($number) {
  @return 1 / cosh($number);
}

/// Determines the hyperbolic cotangent of a given number `$number`
///
/// @author ImBrett
/// @group utility
/// @arg {number} $number [null]
/// The number to determine the hyperbolic cotangent of
/// @return {number} The hyperbolic cotangent of `$number`
///
/// @example scss Determining the hyperbolic cotangent of 1
/// $value: coth(1); => 1.31303528551
///
@function coth($number) {
  @return 1/ tanh($number);
}
